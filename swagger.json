{
  "openapi": "3.0.0",
  "info": {
    "title": "All Things Running Store API",
    "description": "This API retrieves and updates information related to products, customers, and orders for the All Things Running store",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://cse341-project2-5caz.onrender.com"
    },
    {
      "url": "http://localhost:8080"
    }
  ],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
            "tokenUrl": "https://oauth2.googleapis.com/token",
            "scopes": {
              "profile": "Read basic profile information"
            }
          }
        }
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": ["firstName", "lastName", "email", "address"],
        "properties": {
          "firstName": { "type": "string", "example": "Sarah" },
          "lastName": { "type": "string", "example": "Glenn" },
          "email": { "type": "string", "example": "sarah.glenn@yahoo.com" },
          "address": { "type": "string", "example": "245 Main St. Oakland, CA" },
          "phone": { "type": "string", "example": "(925) 556-9076" }
        }
      },
      "Product": {
        "type": "object",
        "required": ["category", "name", "description", "brand", "sizes", "price", "colors"],
        "properties": {
          "category": { "type": "string", "example": "shoes" },
          "name": { "type": "string", "example": "Women's New Balance 680 V8" },
          "description": {
            "type": "string",
            "example": "Comfortable running shoe with a breathable upper that ensures good ventilation and breathability. Provides good support and comfortable cushioning. Weight: 238 g. Drop: 10 mm."
          },
          "brand": { "type": "string", "example": "New Balance" },
          "sizes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "5",
              "5.5",
              "6",
              "6.5",
              "7",
              "7.5",
              "8",
              "8.5",
              "9",
              "9.5",
              "10",
              "10.5",
              "11"
            ]
          },
          "price": { "type": "number", "example": 120 },
          "discount": { "type": "number", "example": 20 },
          "colors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["pink", "yellow", "navy", "white"]
          }
        }
      },
      "Order": {
        "type": "object",
        "required": ["items", "customer_id", "total_price"],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["670523b0a62cf41888afcc2d", "670523b0a62cf41888afcc2f"],
            "description": "An array of product IDs included in the order"
          },
          "customer_id": { "type": "string", "example": "670523cfa62cf41888b0002a" },
          "total_price": { "type": "number", "example": 111 }
        }
      },
      "ValidationFailed": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Validation failed."
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "name is a required field."
            }
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "description": "All Things Running Store API",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "description": "Retrieve all users",
        "content": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Create a new user with first and last name, email, address, and phone number.",
        "security": [
          {
            "oauth2": ["profile"]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "The unique identifier for the newly created user."
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized access. Please log in." },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationFailed" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieve one user by their id. Ex id: 670523cfa62cf41888b00029",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Must use a valid user id to find a user."
          },
          "404": {
            "description": "Not Found - No user exists with that id."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Update an existing user by their id. Can include all or only some fields. Ex id: 670523cfa62cf41888b00029",
        "security": [
          {
            "oauth2": ["profile"]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - The resource was successfully updated, but no response body is returned."
          },
          "400": {
            "description": "Bad Request - Must use a valid user id to find a user. or No fields to update"
          },
          "401": {
            "description": "Unauthorized access. Please log in."
          },
          "404": {
            "description": "Not Found - User not found or nothing was updated."
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/components/schemas/ValidationFailed"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "Delete a user by their id.",
        "security": [
          {
            "oauth2": ["profile"]
          }
        ],
        "content": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - Must use a valid user id to delete a user."
          },
          "401": {
            "description": "Unauthorized access. Please log in."
          },
          "404": {
            "description": "Not Found - User not found or could not be deleted."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/products/": {
      "get": {
        "description": "Retrieve a list of all products",
        "content": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Create a new product with a category, name, description, brand, sizes, price, and colors.",
        "security": [
          {
            "oauth2": ["profile"]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Product" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "productId": {
                      "type": "string",
                      "description": "The unique identifier for the newly created product."
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized access. Please log in." },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationFailed" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "/products/{id}": {
        "get": {
          "description": "Retrieve one product by its id. Ex id: 670523b0a62cf41888afcc2b",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": { "$ref": "#/components/schemas/Product" }
                }
              }
            },
            "400": {
              "description": "Bad Request - Must use a valid product id to find a product."
            },
            "404": {
              "description": "Not Found - No product exists with that id."
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "put": {
          "description": "Update a product by its id. Can include all or some fields.  Ex id: 670523b0a62cf41888afcc2b",
          "security": [
            {
              "oauth2": ["profile"]
            }
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": { "type": "string" }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Product" }
              }
            }
          },
          "responses": {
            "204": {
              "description": "No Content - The resource was successfully updated, but no response body is returned."
            },
            "400": {
              "description": "Bad Request - Must use a valid product id to update a product or No fields to update."
            },
            "401": {
              "description": "Unauthorized access. Please log in."
            },
            "404": {
              "description": "Not Found - Product not found or nothing was updated."
            },
            "412": {
              "description": "Precondition Failed",
              "schema": {
                "$ref": "#/components/schemas/ValidationFailed"
              }
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "description": "Delete a product by its id.",
          "security": [
            {
              "oauth2": ["profile"]
            }
          ],
          "content": ["application/json"],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK"
            },
            "401": {
              "description": "Unauthorized access. Please log in."
            },
            "400": {
              "description": "Bad Request - Must use a valid product id to delete a product."
            },
            "404": {
              "description": "Not Found - product not found or could not be deleted."
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        }
      }
    },
    "/orders/": {
      "get": {
        "description": "Retrieve all orders",
        "security": [
          {
            "oauth2": ["profile"]
          }
        ],
        "content": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": { "description": "Unauthorized access. Please log in." },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "Create a new order using the customer id and product id's.",
        "security": [
          {
            "oauth2": ["profile"]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Order" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderId": {
                      "type": "string",
                      "description": "The unique identifier for the newly created order."
                    }
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized access. Please log in." },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ValidationFailed" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "description": "Retrieve an order by its id. Ex id: 670f61e83c6c310e426042ae",
        "security": [
          {
            "oauth2": ["profile"]
          }
        ],
        "content": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "400": {
            "description": "Bad Request - Must use a valid order id to find an order."
          },
          "401": {
            "description": "Unauthorized access. Please log in."
          },
          "404": {
            "description": "Not Found - No order exists with that id."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "description": "Update an existing order by id. Ex id: 670f61e83c6c310e426042ae",
        "security": [
          {
            "oauth2": ["profile"]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Order" }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - The resource was successfully updated, but no response body is returned."
          },
          "400": {
            "description": "Bad Request - Must use a valid order id to update an order. Or No fields to update."
          },
          "401": {
            "description": "Unauthorized access. Please log in."
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/components/schemas/ValidationFailed"
            }
          },
          "404": {
            "description": "Not Found or nothing was updated."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "description": "Delete an existing order by its id.",
        "security": [
          {
            "oauth2": ["profile"]
          }
        ],
        "content": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request - Must use a valid order id to delete an order."
          },
          "401": {
            "description": "Unauthorized access. Please log in."
          },
          "404": {
            "description": "Not Found - Order not found or could not be deleted."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}
